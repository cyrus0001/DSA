
LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
  if (head == NULL || head ->next ==NULL){
       return head;
  }
  LinkedListNode<int>*prev = NULL;
  LinkedListNode<int>*curr = head ;
  LinkedListNode<int>*forward = NULL;

  while(curr !=NULL){
      forward = curr -> next;
      curr ->next = prev;
    
      prev = curr;
      curr = forward;

  }
  return prev;

}

//Complexity : TC -> O(n) and SC -> O(1)

// recursive method 

void reverseList(LinkedListNode<int>* &head,LinkedListNode<int>* curr,LinkedListNode<int>* prev){
    if (curr==NULL){
        head = prev;
        return;
    }
    LinkedListNode<int>* forward = curr ->next;
    reverseList(head,forward,curr);
    curr ->next = prev;
}

LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    LinkedListNode<int>*curr = head;
    LinkedListNode<int>*prev = NULL;
    reverseList(head,curr,prev);
    return head;
}
