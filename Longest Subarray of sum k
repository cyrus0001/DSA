
int longestSubArray ( vector<int>& nums , long long K){
   map<long long , int >preSumMap;
   long long sum = 0 ;
   int maxLen = 0;
   for(int i = 0 ; i < nums.size() ; i++){
        sum += nums[i];
        if(sum == K){
            maxLen = max(maxLen,i+1);
        }
        long long rem = sum - K;
        if(preSumMap.find(rem) !=preSumMap.end()){
            int len = i - preSumMap[rem];
            maxLen = max(maxLen,len);
        }
        if(preSumMap.find(sum) == preSumMap.end()){
            preSumMap[sum] =i;
        }
   }
   return maxLen;
};
//Complexity for order map is O(nlogn) and for unorder map is for best case O(n) and for wrost case  O(n^2). Space complexity is O(n). 

// Array containing 0 and positive then

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int left = 0 ,right = 0 ;
    int maxLength = 0 ;
    long long sum = a[0];
    int n = a.size();
    while(right < n){
        while(left <= right && sum >k){
            sum -=a[left];
            left++;
        }
        if (sum == k ){
            maxLength = max(maxLength,right-left+1);
        }
        right++;
        if(right<n){
            sum +=a[right];
        }
    }
    return maxLength;
};
