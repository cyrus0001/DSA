
//Bruteforce approach 
bool checkPalindrome(vector<int>arr){
    int n = arr.size();
    int s = 0 ;
    int e = n - 1;
    while(s<=e){
         if (arr[s] != arr[e]){
             return false;
         }
         s++;
         e--;
    }
     return true;
 }

bool isPalindrome(ListNode* head){
     vector<int>arr;
     ListNode* temp = head;
     while(temp != nullptr){
           arr.push_back(temp-> val);
           temp = temp ->next;
     }
      return checkPalindrome(arr);
}

//Complexity : TC -> O(n) and SC -> O(n).


//Optimal solution
  ListNode* getMid (ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head ->next;

        while(  fast!=nullptr && fast->next != nullptr){
            fast = fast-> next -> next;
            slow = slow -> next;
        }
        return slow;
  }

  ListNode* reverse (ListNode* head){
        if(head == nullptr  && head ->next == nullptr){
            return head;
        }

        ListNode* curr = head ;
        ListNode* prev = nullptr;
        ListNode* next = nullptr;

        while(curr != nullptr){
            next = curr->next;
            curr ->next = prev;
            prev = curr ;
            curr = next;
        }
        return prev;
 }
bool isPalindrome(ListNode* head) {
        if(head == nullptr || head -> next == nullptr){
            return true;
        }
        ListNode* middle = getMid (head);
        ListNode* temp = middle -> next;
        middle -> next = reverse(temp);

        ListNode* head1 = head;
        ListNode* head2 = middle -> next ;

        while(head2 != nullptr){
            if(head1 ->val != head2 -> val){
                return false;
            }
            head1 = head1 -> next ;
            head2= head2 -> next;
        }
        return true;
        
  }

//Complexity:TC -> O(n) and SC -> O(1).
