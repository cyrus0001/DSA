
//Brute force method : 
int singleNonDuplicate(vector<int>& arr){
   int ans = 0 ;
   for(int i = 0 ; i < arr.size(); i++){
       ans = ans ^ arr[i];
   }
   return ans;
}

//Complexity : TC -> O(n) ans SC -> O(1).

//Optimal method : 
int singleNonDuplicate(vector<int>& arr)
{
	int  n = arr.size();

	if (n == 1){
		return arr[0];
	}
	if (arr[0] != arr[1]){
		return arr[0];
	}
	if (arr[n-1] != arr[n-2]){
		return arr[n-1];
	}

	int s = 1 ; 
	int e = n-2 ;

	while(s <= e){
		int mid = s +(e-s)/2;

		if (arr[mid] != arr[mid+1] && arr[mid] != arr[mid-1]){
			return arr[mid];
		}
		else if ((mid % 2 == 0 && arr[mid] == arr[mid+1])||(mid%2==1 && arr[mid] == arr[mid-1])){
			s = mid + 1;
		}
		else {
			e = mid -1;
		}

	}
	return -1;
}

//Complexity : The Time complexity is O(logn) ans Space complexity is O(1).
