
class MyCircularQueue {
    int *arr;
    int front;
    int rear;
    int size;
public:
    MyCircularQueue(int k) {
        size = k;
        arr = new int[size];
        front = rear = -1;
        
    }
    
    bool enQueue(int value) {
        if(isFull()){
            return false;
        }
        else if(isEmpty()){
            front = rear = 0;
        }
        else if(front != 0 && rear == size-1){
            rear = 0 ;
        }
        else{
            rear++;
        }
        arr[rear] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
        int ans = arr[front];
        arr[front] = -1;
        if(front == rear){
            front = rear = -1;
        }
        else if (front == size -1){
            front = 0 ;
        }
        else{
            front++;
        }
        return true;
        
    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        else{
            return arr[front];
        }
        
    }
    
    int Rear() {
        if(isEmpty()){
            return -1 ;
        }
        else {
            return arr[rear];
        }
        
    }
    
    bool isEmpty() {
        if(front == -1){
            return true;
        }
        return false;
        
    }
    
    bool isFull() {
        if ((front == 0 && rear == size-1 ) || ( front!=0  && (rear+1)%size == front )){
            return true;
        }
        return false; 
    }
};

//Time complexity : TC -> O(1) and SC -> O(1).
