
bool isMove(vector<vector<int>>& m , int n ,int x , int y ,vector<vector<int>> visited ){
        if(( x >=0 && x < n) && ( y >= 0 && y < n) && m[x][y]==1 && visited[x][y]==0){
            return true;
        }
        else {
            return false;
        }
    }
    
    void solve(vector<string>& ans , int x , int y , vector<vector<int>>& m , int n , vector<vector<int>> visited , string path){
        if(x == n-1 && y == n-1){
            ans.push_back(path);
            return ;
        }
        visited[x][y] = 1;
        
        int newx = x + 1;
        int newy = y ;
        if(isMove(m,n,newx,newy,visited)){
            path.push_back('D');
            solve(ans,newx,newy,m,n,visited,path);
            path.pop_back();
        }
        
        
        newx = x;
        newy = y-1 ;
        if(isMove(m,n,newx,newy,visited)){
            path.push_back('L');
            solve(ans,newx,newy,m,n,visited,path);
            path.pop_back();
        }
        
        
        newx = x ;
        newy = y + 1 ;
        if(isMove(m,n,newx,newy,visited)){
            path.push_back('R');
            solve(ans,newx,newy,m,n,visited,path);
            path.pop_back();
        }
        
        newx = x - 1;
        newy = y ;
        if(isMove(m,n,newx,newy,visited)){
            path.push_back('U');
            solve(ans,newx,newy,m,n,visited,path);
            path.pop_back();
        }
        
        
        visited[x][y] = 0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        if(m[0][0] == 0){
            return ans;
        }
        vector<vector<int>> visited = m;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < n ; j++){
                visited[i][j] = 0;
            }
        }
        int srcx = 0;
        int srcy = 0;
        
        string path = "";
        solve(ans,srcx,srcy,m,n,visited,path);
        sort(ans.begin(),ans.end());
        return ans;
    }
