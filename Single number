//  Array with every numbers appears 3 times 
    int singleNumber(vector<int>& nums) {
        set<int> st;
        for(int i = 0 ; i< nums.size(); i++){
            st.insert(nums[i]);
        }
        long sTsum = 0 ;
        for(auto it : st){
            sTsum += it;
        }
        long sum = 0 ;
        for(int i = 0 ; i< nums.size();i++){
            sum += nums[i];

        }
        int ans = (3*sTsum - sum)/2;

        return ans;
    }

//Method 2 
   int singleNumber(vector<int>& nums) {
        unordered_map<int,int>mp;
        int n = nums.size();
        int ans;

        for(int i = 0 ; i < n ; i++){
            mp[nums[i]]++;
        }
        for(auto it : mp){
            if (it.second == 1){
                ans = it.first;
            }
        }
        return ans;
        
    }


//Complexity is O(n) and space complexity O(size of set).

//Array with every  element appears twice 

    int singleNumber(vector<int>& nums) {
        int ans = 0 ;
        for(int i = 0 ; i< nums.size();i++){
            ans = ans^ nums[i];
        }
        return ans ;

