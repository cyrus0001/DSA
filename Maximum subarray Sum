
//Brute force 
int largestSumOfSubArray(vector<int>& nums){
    int maxi = INT_MIN;
    for(int i = 0 ; i< nums.size();i++){
        for(int j = i ; j< nums.size(); j++){
            int sum = 0 ;
            for(int k = i ; k<=j ; k++){
                sum +=nums[k];
            }
            maxi = max(sum,maxi);
        }
    }
    return maxi;
}
//Complexity is : TC -> O(n^3) and SC -> O(1).


// Better 

int largestSumOfSubArray(vector<int>& nums){
    int maxi = INT_MIN;
    for(int i = 0 ; i< nums.size();i++){
        int sum = 0 ;
        for(int j = i ; j< nums.size(); j++){
            sum +=nums[k];
            maxi = max(sum,maxi);
        }
    }
    return maxi;
}
//Compexity : TC -> O(n^2) and SC -> O(1).

//Optimal solution 

    int maxSubArray(vector<int>& nums) {
        long long maxi = LONG_MIN;
        long long sum = 0;
        for(int i = 0 ; i < nums.size() ; i++){
            sum += nums[i];
        
            if(sum > maxi){
                maxi = sum;
            }
            if(sum < 0){
                sum = 0;
            }
        }
        return maxi;
    }
//Complexity : TC -> O(n) and SC -> O(1).

