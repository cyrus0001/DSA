
class MyCircularDeque {
    int *arr;
    int front;
    int rear;
    int size;

public:
    MyCircularDeque(int k) {
        size = k;
        arr = new int[k];
        front = -1;
        rear = -1;
        
    }
    
    bool insertFront(int value) {
        if(isFull()){
            return false;
        }
        else if(isEmpty()){
            front = rear = 0;
        }
        else if(front == 0 && rear != size -1){
            front = size - 1;
        }
        else{
            front --;
        }
        arr[front] = value;
        return true;
        
    }
    
    bool insertLast(int value) {
        if(isFull()){
            return false;
        }
        else if (isEmpty()){
            front = rear = 0;
        }
        else if (front != 0 && rear == size -1){
            rear = 0;
        }
        else{
            rear++;
        }
        arr[rear] = value;
        return true;
        
    }
    
    bool deleteFront() {
        if(isEmpty()){
            return false;
        }
        int ans = arr[front];
        arr[front] = -1;
        
        if(front == rear){
            rear = front = -1;
        }
        else if (front == size -1){
            front = 0;
        }
        else{
            front++;
        }
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()){
            return false;
        }
        int ans = arr[rear];
        arr[rear] = -1;
        if(front == rear){
            rear = front = -1;
        }
        else if (rear == 0){
            rear = size -1 ;
        }
        else{
            rear--;
        }
        return true;
    }
    
    int getFront() {
        if(isEmpty()){
            return -1;
        }
        else{
            return arr[front];
        }
        
    }
    
    int getRear() {
        if(isEmpty()){
            return -1;
        }
        else{
            return arr[rear];
        }
        
    
        
    }
    
    bool isEmpty() {
        if(front == -1){
            return true;
        }
        else{
            return false;
        }
        
    }
    
    bool isFull() {
        if((front == 0 && rear == size -1 )||(front != 0 && size!=0 && (rear+1)% size == front)){
            return true;
        }
        else{
            return false;
        }
        
    }
};

